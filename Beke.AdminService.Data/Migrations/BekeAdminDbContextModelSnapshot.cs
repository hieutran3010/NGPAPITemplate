// <auto-generated />
using System;
using Beke.AdminService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Beke.AdminService.Data.Migrations
{
    [DbContext(typeof(BekeAdminDbContext))]
    partial class BekeAdminDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:citext", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Beke.AdminService.Data.Entities.PricingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1mc()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("createdby")
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnName("modifiedby")
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedon")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext");

                    b.Property<int>("Price")
                        .HasColumnName("price")
                        .HasColumnType("integer");

                    b.Property<int>("PricingPackage")
                        .HasColumnName("pricingpackage")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_pricingplan");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_pricingplan_name");

                    b.HasIndex("PricingPackage")
                        .IsUnique()
                        .HasName("ix_pricingplan_pricingpackage");

                    b.ToTable("pricingplan");
                });

            modelBuilder.Entity("Beke.AdminService.Data.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1mc()");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnName("brandname")
                        .HasColumnType("citext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("createdby")
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<int>("DurationMonth")
                        .HasColumnName("durationmonth")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnName("expireddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("InvertLogo")
                        .HasColumnName("invertlogo")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("islocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrial")
                        .HasColumnName("istrial")
                        .HasColumnType("boolean");

                    b.Property<string>("LockReason")
                        .HasColumnName("lockreason")
                        .HasColumnType("citext");

                    b.Property<byte[]>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("bytea");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnName("modifiedby")
                        .HasColumnType("citext");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modifiedon")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnName("owneruserid")
                        .HasColumnType("citext");

                    b.Property<int>("PaymentStatus")
                        .HasColumnName("paymentstatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PricingPlanId")
                        .HasColumnName("pricingplanid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnName("registereddate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_tenant");

                    b.HasIndex("BrandName")
                        .IsUnique()
                        .HasName("ix_tenant_brandname");

                    b.HasIndex("OwnerUserId")
                        .HasName("ix_tenant_owneruserid");

                    b.HasIndex("PricingPlanId")
                        .HasName("ix_tenant_pricingplanid");

                    b.ToTable("tenant");
                });

            modelBuilder.Entity("Beke.AdminService.Data.Entities.Tenant", b =>
                {
                    b.HasOne("Beke.AdminService.Data.Entities.PricingPlan", "PricingPlan")
                        .WithMany("Tenants")
                        .HasForeignKey("PricingPlanId")
                        .HasConstraintName("fk_tenant_pricingplan_pricingplanid");
                });
#pragma warning restore 612, 618
        }
    }
}
